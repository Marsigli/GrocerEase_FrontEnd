{"ast":null,"code":"import _slicedToArray from \"/Users/jonathanmarsigli/momentum-assignments/GrocerEase_FrontEnd/grocerease/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport storage from './storage';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nexport default function useLocalStorageStateBase(key, defaultValue) {\n  var defaultValueForKey = useMemo(function () {\n    var isCallable = function isCallable(value) {\n      return typeof value === 'function';\n    };\n\n    return isCallable(defaultValue) ? defaultValue() : defaultValue; // disabling \"exhaustive-deps\" because we don't want to change the default state when the\n    // `defaultValue` is changed\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [key]);\n  var defaultState = useMemo(function () {\n    return {\n      value: storage.get(key, defaultValueForKey),\n      isPersistent: function () {\n        /**\n         * We want to return `true` on the server. If you render a message based on\n         * `isPersistent` and the server returns `false` then the message will flicker until\n         * hydration is done:\n         * `{!isPersistent && <span>You changes aren't being persisted.</span>}`\n         */\n        if (typeof window === 'undefined') {\n          return true;\n        }\n\n        try {\n          // - ulss = use-local-storage-state\n          // - using shorthand to make library smaller in size\n          localStorage.setItem('__ulss', '#');\n          localStorage.removeItem('__ulss');\n          return true;\n        } catch (_a) {\n          return false;\n        }\n      }()\n    };\n  }, [key, defaultValueForKey]);\n\n  var _useState = useState(defaultState),\n      _useState2 = _slicedToArray(_useState, 2),\n      _useState2$ = _useState2[0],\n      value = _useState2$.value,\n      isPersistent = _useState2$.isPersistent,\n      setState = _useState2[1];\n\n  var updateValue = useMemo(function () {\n    return function (newValue) {\n      var isCallable = function isCallable(value) {\n        return typeof value === 'function';\n      };\n\n      if (isCallable(newValue)) {\n        setState(function (state) {\n          return {\n            value: newValue(state.value),\n            isPersistent: storage.set(key, newValue(state.value))\n          };\n        });\n      } else {\n        setState({\n          value: newValue,\n          isPersistent: storage.set(key, newValue)\n        });\n      }\n    };\n  }, [key]); // syncs changes across tabs and iframe's\n\n  useEffect(function () {\n    var onStorage = function onStorage(e) {\n      if (e.storageArea === localStorage && e.key === key) {\n        setState({\n          value: storage.get(key, defaultValueForKey),\n          isPersistent: true\n        });\n      }\n    };\n\n    window.addEventListener('storage', onStorage);\n    return function () {\n      return window.removeEventListener('storage', onStorage);\n    };\n  }, [key, defaultValueForKey]);\n  var isFirstRender = useRef(true);\n  useEffect(function () {\n    // set the `defaultValue` in the localStorage on initial render:\n    // https://github.com/astoilkov/use-local-storage-state/issues/26\n    storage.set(key, defaultState.value);\n\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    } // update the state when the `key` property changes (not on first render because this will\n    // cause a second unnecessary render)\n\n\n    setState(defaultState);\n  }, [key, defaultState]);\n  return useMemo(function () {\n    return [value, updateValue, {\n      isPersistent: isPersistent,\n      removeItem: function removeItem() {\n        storage.remove(key);\n        setState(function (state) {\n          return {\n            value: defaultValueForKey,\n            isPersistent: state.isPersistent\n          };\n        });\n      }\n    }];\n  }, [value, updateValue, isPersistent, key, defaultValueForKey]);\n}","map":{"version":3,"sources":["/Users/jonathanmarsigli/momentum-assignments/GrocerEase_FrontEnd/grocerease/node_modules/use-local-storage-state/es/src/useLocalStorageStateBase.js"],"names":["storage","useEffect","useMemo","useRef","useState","useLocalStorageStateBase","key","defaultValue","defaultValueForKey","isCallable","value","defaultState","get","isPersistent","window","localStorage","setItem","removeItem","_a","setState","updateValue","newValue","state","set","onStorage","e","storageArea","addEventListener","removeEventListener","isFirstRender","current","remove"],"mappings":"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","sourcesContent":["import storage from './storage';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nexport default function useLocalStorageStateBase(key, defaultValue) {\n    const defaultValueForKey = useMemo(() => {\n        const isCallable = (value) => typeof value === 'function';\n        return isCallable(defaultValue) ? defaultValue() : defaultValue;\n        // disabling \"exhaustive-deps\" because we don't want to change the default state when the\n        // `defaultValue` is changed\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [key]);\n    const defaultState = useMemo(() => {\n        return {\n            value: storage.get(key, defaultValueForKey),\n            isPersistent: (() => {\n                /**\n                 * We want to return `true` on the server. If you render a message based on\n                 * `isPersistent` and the server returns `false` then the message will flicker until\n                 * hydration is done:\n                 * `{!isPersistent && <span>You changes aren't being persisted.</span>}`\n                 */\n                if (typeof window === 'undefined') {\n                    return true;\n                }\n                try {\n                    // - ulss = use-local-storage-state\n                    // - using shorthand to make library smaller in size\n                    localStorage.setItem('__ulss', '#');\n                    localStorage.removeItem('__ulss');\n                    return true;\n                }\n                catch (_a) {\n                    return false;\n                }\n            })(),\n        };\n    }, [key, defaultValueForKey]);\n    const [{ value, isPersistent }, setState] = useState(defaultState);\n    const updateValue = useMemo(() => {\n        return (newValue) => {\n            const isCallable = (value) => typeof value === 'function';\n            if (isCallable(newValue)) {\n                setState((state) => ({\n                    value: newValue(state.value),\n                    isPersistent: storage.set(key, newValue(state.value)),\n                }));\n            }\n            else {\n                setState({\n                    value: newValue,\n                    isPersistent: storage.set(key, newValue),\n                });\n            }\n        };\n    }, [key]);\n    // syncs changes across tabs and iframe's\n    useEffect(() => {\n        const onStorage = (e) => {\n            if (e.storageArea === localStorage && e.key === key) {\n                setState({\n                    value: storage.get(key, defaultValueForKey),\n                    isPersistent: true,\n                });\n            }\n        };\n        window.addEventListener('storage', onStorage);\n        return () => window.removeEventListener('storage', onStorage);\n    }, [key, defaultValueForKey]);\n    const isFirstRender = useRef(true);\n    useEffect(() => {\n        // set the `defaultValue` in the localStorage on initial render:\n        // https://github.com/astoilkov/use-local-storage-state/issues/26\n        storage.set(key, defaultState.value);\n        if (isFirstRender.current) {\n            isFirstRender.current = false;\n            return;\n        }\n        // update the state when the `key` property changes (not on first render because this will\n        // cause a second unnecessary render)\n        setState(defaultState);\n    }, [key, defaultState]);\n    return useMemo(() => [\n        value,\n        updateValue,\n        {\n            isPersistent: isPersistent,\n            removeItem() {\n                storage.remove(key);\n                setState((state) => ({\n                    value: defaultValueForKey,\n                    isPersistent: state.isPersistent,\n                }));\n            },\n        },\n    ], [value, updateValue, isPersistent, key, defaultValueForKey]);\n}\n"]},"metadata":{},"sourceType":"module"}